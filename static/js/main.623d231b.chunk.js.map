{"version":3,"sources":["example/App.js","HandleCheckboxHOC.jsx","index.js"],"names":["createDummyArray","arraySize","dataType","dummyData","value","dummyvalue","push","fName","lName","username","id","handleCheckbox","PassedComponent","Configuration","state","checkedItems","isShiftKeyPressed","checkboxKey","totalItems","lastCheckedItem","updateTotalItems","totalData","uncheckAll","setState","checkAll","length","newCheckedItems","getKeyToCheck","keyUpDownListener","event","isKeyUpEvent","keyCode","addOrDeleteCheckedItem","currentChecked","isElementExist","isExist","elementIndex","splice","updateCheckedItems","isCurrentCheckedIdExistObject","isCheckedElementExist","isLastCheckedIdExistObject","lastCheckedIndex","lastCheckedExist","getCheckedId","indexToStart","Math","min","indexToEnd","max","getUpdatedShiftItems","checkedItemsCount","data","checkedValue","key","some","index","isShiftHandlingRequired","isShiftRequired","this","document","addEventListener","props","removeEventListener","PureComponent","dummyArray","isCheckboxValueExist","handleChange","isAll","Table","striped","bordered","hover","type","name","checked","onChange","map","ReactDOM","render","StrictMode","getElementById"],"mappings":"6UAQO,SAASA,EAAiBC,GAI/B,IAJgE,IAAtBC,EAAqB,uDAAV,SAEjDC,EAAY,GAERC,EAAQ,EAAIA,EAAQH,EAAWG,IAAU,CAE/C,IAAIC,EAAa,OAASD,EAEV,WAAbF,EACDC,EAAUG,KAAKF,GAEfD,EAAUG,KAAV,aACEC,MAAOF,EACPG,MAAOH,EACPI,SAAUJ,EACVK,GAAIN,GClBa,YDmBJA,IAMnB,OAAOD,EAYF,IA6EQQ,EChHA,SAA+BC,GAAmE,IAA7BC,EAA4B,uDAAJ,GAMxG,mNAEIC,MAAQ,CACJC,aAAc,IAHtB,EAMIC,mBAAoB,EANxB,EAOIC,YAAc,KAPlB,EAQIC,WAAa,GARjB,EASIC,gBAAkB,KATtB,EAoDIC,iBAAmB,SAACC,GAChB,EAAKH,WAAL,YAAsBG,IArD9B,EA2DIC,WAAa,WAET,EAAKH,gBAAkB,KAEvB,EAAKI,SAAS,CACVR,aAAc,MAhE1B,EAwEIS,SAAW,WAEP,GAAG,EAAKN,YAAc,EAAKA,WAAWO,OAAS,EAAG,CAE9C,IAAIC,EAAe,YAAO,EAAKR,YAC/B,EAAKC,gBAAkB,KAEvB,EAAKI,SAAS,CACZR,aAAcW,MAhF5B,EA0FIC,cAAgB,WAEZ,GAAkC,kBAAxB,EAAKT,WAAW,IAAmD,kBAAxB,EAAKA,WAAW,GACjE,OAAO,KACL,IAEMD,EAAgBJ,EAAhBI,YAER,OAAGA,GA1GM,aAQrB,EA8GIW,kBAAoB,SAACC,EAAcC,GAvHjB,KAyHXD,EAAME,UAGT,EAAKf,kBAAoBc,IAnHjC,EA2HIE,uBAAyB,SAACjB,EAAsCkB,EAAyBC,GAErF,IAAIR,EAAe,YAAOX,GAElBoB,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,aAOjB,OALGD,EACCT,EAAgBW,OAAOD,EAAa,GAEpCV,EAAgBpB,KAAK2B,GAElBP,GAtIf,EA6IIY,mBAAqB,SAACL,GAAoC,IAE9ClB,EAAiB,EAAKD,MAAtBC,aAEJW,EAAe,YAAOX,GAE1B,GAA2B,MAAxB,EAAKI,gBAAyB,CAE7B,IAAMoB,EAAgC,EAAKC,sBAAsB,EAAK1B,MAAMC,aAAakB,GAEzF,GAAG,EAAKjB,kBAAmB,CAEvB,IAAMyB,EAA6B,EAAKD,sBAAsB,EAAK1B,MAAMC,aAAa,EAAKI,iBACrFuB,EAAmBD,EAA2BL,aAC9CO,EAAmBF,EAA2BN,QAEpD,GAAG,EAAKS,aAAaX,KAAoB,EAAKW,aAAa,EAAKzB,iBAC5DO,EAAkB,EAAKM,uBAAuBN,EAAgBO,EAAeQ,QAI7E,GAAGE,GAAoBJ,EAA8BJ,QAAS,CAC1D,IAAMU,EAAeC,KAAKC,IAAIR,EAA8BH,aAAaM,GACnEM,EAAaF,KAAKG,IAAIV,EAA8BH,aAAaM,GACvEhB,EAAgBW,OAAOQ,EAAeG,EAAaH,EAAe,QAOlEnB,EAAkB,EAAKwB,qBAAqBjB,EAAeU,EAAiBJ,QAOpFb,EAAkB,EAAKM,uBAAuBN,EAAgBO,EAAeM,QAIjFb,EAAgBpB,KAAK2B,GAGzB,EAAKV,SAAS,CACVR,aAAcW,IAGlB,EAAKP,gBAAkBc,GA9L/B,EAsMIiB,qBAAuB,SAACjB,EAAiCU,EAA0BJ,GAE/E,IAF0H,EAEtHY,EAAoB,EACpBzB,EAAe,YAAO,EAAKZ,MAAMC,cAHqF,cAKzG,EAAKG,YALoG,IAK1H,2BAAkC,CAAC,IAA1BkC,EAAyB,QAK9B,GAHG,EAAKR,aAAaQ,KAAU,EAAKR,aAAaX,IAAmB,EAAKW,aAAaQ,KAAU,EAAKR,aAAa,EAAKzB,mBACnHgC,GAAqB,GAEtBA,EAAoB,EAAG,CAAC,IAAD,EAEY,EAAKX,sBAAsBd,EAAgB0B,GAArEjB,EAFc,EAEdA,QAASC,EAFK,EAELA,cAEbO,GAAoBJ,EAA8BJ,QAE/CA,GACCT,EAAgBW,OAAOD,EAAa,GAIpCD,GACAT,EAAgBpB,KAAK8C,GAKjC,GAAyB,IAAtBD,EACC,OA5BkH,8BAgC1H,OAAOzB,GAtOf,EA6OIkB,aAAe,SAACS,GAEZ,IAAMC,EAAO,EAAKrC,YAElB,OAAGqC,GAAgC,kBAAlBD,EACNA,EAAaC,GAEjBD,GApPf,EA2PIb,sBAAwB,SAACzB,EAAsCkB,GAE3D,IAAIG,GAAgB,EAapB,MAL2B,CACvBD,QAPapB,EAAawC,MAAK,SAACH,EAAKI,GAGrC,OADApB,EAAeoB,EACP,EAAKZ,aAAaQ,KAAU,EAAKR,aAAaX,MAKtDG,iBAvQZ,EA8QIqB,wBAA0B,WAItB,QAF4B5C,EAApB6C,iBAhRhB,kEAWyB,IAAD,OAEhBC,KAAK1C,YAAc0C,KAAKhC,gBAIrBgC,KAAKF,4BACJG,SAASC,iBAAiB,WAAW,SAAChC,GAAD,OAAmB,EAAKD,kBAAkBC,GAAM,MACrF+B,SAASC,iBAAiB,SAAS,SAAChC,GAAD,OAAmB,EAAKD,kBAAkBC,GAAM,SAnB/F,+BAyBc,IAEEd,EAAkB4C,KAAK7C,MAAvBC,aAER,OACI,kBAACH,EAAD,eACIG,aAAcA,EACdO,WAAYqC,KAAKrC,WACjBE,SAAUmC,KAAKnC,SACfc,mBAAoBqB,KAAKrB,mBACzBlB,iBAAkBuC,KAAKvC,kBACnBuC,KAAKG,UApCzB,6CA2C4B,IAAD,OAEhBH,KAAKF,4BACJG,SAASG,oBAAoB,WAAW,SAAClC,GAAD,OAAmB,EAAKD,kBAAkBC,GAAM,MACxF+B,SAASG,oBAAoB,SAAS,SAAClC,GAAD,OAAmB,EAAKD,kBAAkBC,GAAM,WA/ClG,GAAyCmC,iBD0G9BrD,CA7Ef,4MAEEsD,WAAajE,EAAiB,GAFhC,EA2DEkE,qBAAuB,SAACV,GAEtB,OAAO,EAAKM,MAAM/C,aAAawC,MAAK,SAACH,GACnC,OAAOA,EAAK1C,KAAO,EAAKuD,WAAWT,GAAO9C,OA9DhD,EAkEEyD,aAAe,SAACf,GAA0C,IAA5BgB,EAA2B,wDACpDA,GAAS,EAAKN,MAAM/C,aAAaU,SAAW,EAAKwC,WAAWxC,OAC7D,EAAKqC,MAAMtC,WACJ4C,EACP,EAAKN,MAAMxC,aAEX,EAAKwC,MAAMxB,mBAAmBc,IAxEpC,kEAKIO,KAAKG,MAAM1C,iBAAiBuC,KAAKM,cALrC,6EAaY,IAAD,OAEP,OACE,kBAACI,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,iCACA,0CACA,yCACA,0CAIJ,+BACE,wBAAIlB,IAAK,OACP,4BACE,2BAAOmB,KAAK,WAAW/D,GAAI,MAAOgE,KAAM,MAAOC,QAAShB,KAAKG,MAAM/C,aAAaU,SAAWkC,KAAKM,WAAWxC,OAAQmD,SAAU,kBAAM,EAAKT,aAAa,MAAM,OAE7J,4BAAK,OACL,4BAAK,OACL,4BAAK,QAILR,KAAKM,WAAWY,KAAI,SAACzB,EAAKI,GACxB,OACE,wBAAIF,IAAKE,GACP,4BACE,2BAAOiB,KAAK,WAAW/D,GAAI8C,EAAOkB,KAAMlB,EAAOmB,QAAS,EAAKT,qBAAqBV,GAAQoB,SAAU,kBAAM,EAAKT,aAAaf,OAE9H,4BAAKA,EAAK7C,OACV,4BAAK6C,EAAK5C,OACV,4BAAK4C,EAAK3C,oBA7C5B,GAAyBuD,iBA6ES,CAAC/C,YAAa,KAAMyC,iBAAiB,I,MEjHvEoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASqB,eAAe,W","file":"static/js/main.623d231b.chunk.js","sourcesContent":["//@flow\r\n\r\nimport React, { PureComponent } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nimport './App.css';\r\nimport  handleCheckbox, { CHECK_KEY }  from '../HandleCheckboxHOC';\r\n\r\nexport function createDummyArray(arraySize, dataType = \"object\") {\r\n  \r\n  let dummyData = [];\r\n\r\n  for(let value = 0 ; value < arraySize ;value ++) {\r\n\r\n    let dummyvalue = \"Test\" + value;\r\n\r\n    if(dataType === \"string\")\r\n      dummyData.push(value);\r\n    else {\r\n      dummyData.push ({\r\n        fName: dummyvalue,\r\n        lName: dummyvalue,\r\n        username: dummyvalue,\r\n        id: value,\r\n        [CHECK_KEY]: value,\r\n      });\r\n    }\r\n    \r\n  }\r\n\r\n  return dummyData;\r\n}\r\n\r\ntype Props = {\r\n\r\n  checkedItems: Array<Object>,\r\n  uncheckAll: () => void,\r\n  checkAll: () => void,\r\n  updateCheckedItems: (checkedItems: Object) => void,\r\n  updateTotalItems: (totalData: Array<Object>) => void\r\n}\r\n\r\nexport class App extends PureComponent<Props,{}> {\r\n\r\n  dummyArray = createDummyArray(6);\r\n\r\n  componentDidMount() {\r\n    this.props.updateTotalItems(this.dummyArray);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n   // this.props.updateTotalItems(this.dummyArray);\r\n\r\n  }\r\n\r\n  render() {\r\n   \r\n    return (\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>First Name</th>\r\n            <th>Last Name</th>\r\n            <th>Username</th>\r\n          </tr>\r\n        </thead>\r\n    \r\n        <tbody>\r\n          <tr key={\"All\"}>\r\n            <td>\r\n              <input type=\"checkbox\" id={\"All\"} name={\"All\"} checked={this.props.checkedItems.length === this.dummyArray.length} onChange={() => this.handleChange(null, true)}/>\r\n            </td>\r\n            <td>{\"All\"}</td>\r\n            <td>{\"All\"}</td>\r\n            <td>{\"All\"}</td>\r\n          </tr>\r\n    \r\n          {\r\n            this.dummyArray.map((data,index) =>{\r\n              return (\r\n                <tr key={index}>\r\n                  <td>\r\n                    <input type=\"checkbox\" id={index} name={index} checked={this.isCheckboxValueExist(index)} onChange={() => this.handleChange(data)}/>\r\n                  </td>\r\n                  <td>{data.fName}</td>\r\n                  <td>{data.lName}</td>\r\n                  <td>{data.username}</td>\r\n                </tr>\r\n              )\r\n            \r\n            })\r\n          }\r\n        \r\n        </tbody>\r\n    \r\n      </Table>\r\n    );\r\n\r\n  }\r\n\r\n  isCheckboxValueExist = (index: number) => {\r\n\r\n    return this.props.checkedItems.some((data) => {\r\n      return data.id === this.dummyArray[index].id\r\n    });\r\n  }\r\n\r\n  handleChange = (data: Object, isAll: boolean = false) => {\r\n    if(isAll && this.props.checkedItems.length !== this.dummyArray.length)\r\n      this.props.checkAll();\r\n    else if( isAll )\r\n      this.props.uncheckAll();\r\n    else\r\n      this.props.updateCheckedItems(data)\r\n  }\r\n  \r\n}\r\n\r\nexport default handleCheckbox(App,{checkboxKey: 'id', isShiftRequired: true})\r\n\r\n","//@flow\r\n\r\nimport React, { PureComponent, type ComponentType } from \"react\";\r\n\r\nexport const SHIFT_CODE = 16;\r\nexport const CHECK_KEY = \"CHECK_KEY\";\r\n\r\nexport default function handleCheckbox<Props>(PassedComponent: ComponentType<Props>,Configuration: Object = {}) {\r\n\r\n    type State = {\r\n        checkedItems: Array<Object | string>\r\n    };\r\n\r\n    return class CheckedDataHandling extends PureComponent<Props,State> {\r\n\r\n        state = {\r\n            checkedItems: [], // checked data\r\n        };\r\n\r\n        isShiftKeyPressed = false;\r\n        checkboxKey = null;\r\n        totalItems = [];\r\n        lastCheckedItem = null;\r\n\r\n        componentDidMount() {\r\n\r\n            this.checkboxKey = this.getKeyToCheck();\r\n\r\n            // To add listeners if shift is required\r\n\r\n            if(this.isShiftHandlingRequired()) {\r\n                document.addEventListener(\"keydown\", (event: Object) => this.keyUpDownListener(event,true));\r\n                document.addEventListener(\"keyup\", (event: Object) => this.keyUpDownListener(event,false));\r\n            }\r\n            \r\n\r\n        }\r\n\r\n        render() {\r\n            \r\n            const { checkedItems  } = this.state;\r\n\r\n            return (\r\n                <PassedComponent\r\n                    checkedItems={checkedItems}\r\n                    uncheckAll={this.uncheckAll}\r\n                    checkAll={this.checkAll}\r\n                    updateCheckedItems={this.updateCheckedItems}\r\n                    updateTotalItems={this.updateTotalItems}\r\n                    {...this.props}\r\n                />\r\n\r\n            );\r\n\r\n        }\r\n\r\n        componentWillUnmount() {\r\n\r\n            if(this.isShiftHandlingRequired()) {\r\n                document.removeEventListener(\"keydown\", (event: Object) => this.keyUpDownListener(event,true));\r\n                document.removeEventListener(\"keyup\", (event: Object) => this.keyUpDownListener(event,false));\r\n            }\r\n\r\n        }\r\n\r\n        updateTotalItems = (totalData: Array<Object | string>) => {\r\n            this.totalItems = [...totalData];\r\n        }\r\n\r\n        /**\r\n         *  To uncheck all checkboxes\r\n         */\r\n        uncheckAll = () => {\r\n\r\n            this.lastCheckedItem = null;\r\n\r\n            this.setState({\r\n                checkedItems: []\r\n            });\r\n\r\n        }\r\n        \r\n        /**\r\n         * To check all checkboxes\r\n         */\r\n        checkAll = () => {\r\n\r\n            if(this.totalItems && this.totalItems.length > 0) {\r\n\r\n                let newCheckedItems = [...this.totalItems];\r\n                this.lastCheckedItem = null;\r\n    \r\n                this.setState({\r\n                  checkedItems: newCheckedItems\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * To get key tocheck in checkbox\r\n         */\r\n        getKeyToCheck = () => {\r\n\r\n            if(typeof(this.totalItems[0]) === \"string\" || typeof(this.totalItems[0]) === \"number\")\r\n                return null;\r\n            else {\r\n                \r\n                const { checkboxKey } = Configuration;\r\n\r\n                if(checkboxKey)\r\n                    return checkboxKey;\r\n\r\n            }\r\n\r\n            return CHECK_KEY;\r\n\r\n        }\r\n\r\n        /**\r\n         * Adding key down listener\r\n         */\r\n        keyUpDownListener = (event: Object,isKeyUpEvent: boolean) => {\r\n\r\n            if(event.keyCode !== SHIFT_CODE)\r\n                return;\r\n            \r\n            this.isShiftKeyPressed = isKeyUpEvent;\r\n\r\n        }\r\n\r\n        /**\r\n         * To add or delete element from checked data\r\n        */\r\n\r\n        addOrDeleteCheckedItem = (checkedItems: Array<Object | string>, currentChecked ?:Object, isElementExist: Object) => {\r\n\r\n            let newCheckedItems = [...checkedItems];\r\n\r\n            const { isExist, elementIndex } = isElementExist;\r\n             \r\n            if(isExist)\r\n                newCheckedItems.splice(elementIndex,1);\r\n            else\r\n                newCheckedItems.push(currentChecked);\r\n\r\n            return newCheckedItems;\r\n        }\r\n\r\n\r\n        /**\r\n         * To update the checked data\r\n         */\r\n        updateCheckedItems = (currentChecked: Object| string) => {\r\n\r\n            const { checkedItems } = this.state;\r\n\r\n            let newCheckedItems = [...checkedItems];\r\n\r\n            if(this.lastCheckedItem != null) {\r\n\r\n                const isCurrentCheckedIdExistObject = this.isCheckedElementExist(this.state.checkedItems,currentChecked);\r\n\r\n                if(this.isShiftKeyPressed) {\r\n\r\n                    const isLastCheckedIdExistObject = this.isCheckedElementExist(this.state.checkedItems,this.lastCheckedItem);\r\n                    const lastCheckedIndex = isLastCheckedIdExistObject.elementIndex;\r\n                    const lastCheckedExist = isLastCheckedIdExistObject.isExist;\r\n\r\n                    if(this.getCheckedId(currentChecked) === this.getCheckedId(this.lastCheckedItem))\r\n                        newCheckedItems = this.addOrDeleteCheckedItem(newCheckedItems,currentChecked,isLastCheckedIdExistObject);\r\n                    else {\r\n\r\n                        // Remove all\r\n                        if(lastCheckedExist && isCurrentCheckedIdExistObject.isExist) {        \r\n                            const indexToStart = Math.min(isCurrentCheckedIdExistObject.elementIndex,lastCheckedIndex);\r\n                            const indexToEnd = Math.max(isCurrentCheckedIdExistObject.elementIndex,lastCheckedIndex);\r\n                            newCheckedItems.splice(indexToStart, (indexToEnd - indexToStart + 1));\r\n                        }\r\n\r\n                        else {\r\n\r\n                            // Iterate to add or remove element between them\r\n\r\n                            newCheckedItems = this.getUpdatedShiftItems(currentChecked,lastCheckedExist,isCurrentCheckedIdExistObject);\r\n                            \r\n                        }\r\n                    }\r\n\r\n                }\r\n                else \r\n                    newCheckedItems = this.addOrDeleteCheckedItem(newCheckedItems,currentChecked,isCurrentCheckedIdExistObject);\r\n\r\n            }\r\n            else \r\n                newCheckedItems.push(currentChecked);\r\n\r\n\r\n            this.setState({\r\n                checkedItems: newCheckedItems,\r\n            });\r\n\r\n            this.lastCheckedItem = currentChecked;\r\n\r\n\r\n        }\r\n\r\n        /**\r\n         * To get data in case of shift key pressed\r\n         */\r\n        getUpdatedShiftItems = (currentChecked:  Object | string,lastCheckedExist: boolean,isCurrentCheckedIdExistObject: Object ) => {\r\n\r\n            let checkedItemsCount = 0;\r\n            let newCheckedItems = [...this.state.checkedItems];\r\n\r\n            for (let data of this.totalItems) {\r\n\r\n                if(this.getCheckedId(data) === this.getCheckedId(currentChecked) || this.getCheckedId(data) === this.getCheckedId(this.lastCheckedItem))\r\n                    checkedItemsCount += 1;\r\n\r\n                if(checkedItemsCount > 0) {\r\n\r\n                    const { isExist, elementIndex } = this.isCheckedElementExist(newCheckedItems,data);\r\n\r\n                    if(!lastCheckedExist && isCurrentCheckedIdExistObject.isExist) {\r\n\r\n                        if(isExist)\r\n                            newCheckedItems.splice(elementIndex,1);\r\n                    }\r\n                    \r\n                    else {\r\n                        if(!isExist)\r\n                            newCheckedItems.push(data);\r\n                    }\r\n\r\n                }\r\n                   \r\n                if(checkedItemsCount === 2)\r\n                    break;\r\n\r\n            }\r\n\r\n            return newCheckedItems;\r\n\r\n        }\r\n\r\n        /**\r\n         * To get the checked id\r\n         */\r\n        getCheckedId = (checkedValue ?: Object) => {\r\n\r\n            const key  = this.checkboxKey;\r\n\r\n            if(key && typeof(checkedValue) === \"object\")\r\n                return checkedValue[key];\r\n\r\n            return checkedValue;\r\n\r\n        }\r\n\r\n        /**\r\n         * To check if element exist or not\r\n         */\r\n        isCheckedElementExist = (checkedItems: Array<Object | string> ,currentChecked ?: Object) => {\r\n\r\n            let elementIndex = -1;\r\n\r\n            const isExist  = checkedItems.some((data,index) => {\r\n\r\n                elementIndex = index;\r\n                return (this.getCheckedId(data) === this.getCheckedId(currentChecked))\r\n            });\r\n\r\n            const elementExistObject = {\r\n                isExist,\r\n                elementIndex\r\n            };\r\n\r\n            return elementExistObject;\r\n\r\n        }\r\n\r\n        isShiftHandlingRequired = () => {\r\n\r\n            const { isShiftRequired } = Configuration;\r\n    \r\n            if(isShiftRequired)\r\n                return true;\r\n    \r\n            return false;\r\n    \r\n    \r\n        }\r\n\r\n    }\r\n    \r\n    \r\n\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './example/App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}